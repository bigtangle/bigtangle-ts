import { beforeEach, describe, expect, test } from "vitest";
import { Address } from "../../src/net/bigtangle/core/Address";
import { Block } from "../../src/net/bigtangle/core/Block";
 
import { Coin } from "../../src/net/bigtangle/core/Coin";
import { ECKey } from "../../src/net/bigtangle/core/ECKey";
import { MemoInfo } from "../../src/net/bigtangle/core/MemoInfo";
 import { Wallet } from "../../src/net/bigtangle/wallet/Wallet";
import { FreeStandingTransactionOutput } from "../../src/net/bigtangle/wallet/FreeStandingTransactionOutput";

import { TokenType } from "../../src/net/bigtangle/core/TokenType";
import { RemoteTest } from "./Remote.test";
import { ReqCmd } from "../../src/net/bigtangle/params/ReqCmd";
import { OkHttp3Util } from "../../src/net/bigtangle/utils/OkHttp3Util";
import { Utils } from "../../src/net/bigtangle/core/Utils";
import { sign } from "crypto";
import { TransactionSignature } from "../../src/net/bigtangle/crypto/TransactionSignature";
import { SigHash } from "../../src/net/bigtangle/core/SigHash";
import { Transaction } from "../../src/net/bigtangle/core/Transaction";
import { TransactionOutput } from "../../src/net/bigtangle/core/TransactionOutput";
import { TransactionInput } from "../../src/net/bigtangle/core/TransactionInput";
import { NetworkParameters } from "../../src/net/bigtangle/params/NetworkParameters";
import { ScriptBuilder } from "../../src/net/bigtangle/script/ScriptBuilder";


class RemoteBinaryTests extends RemoteTest {}

describe("RemoteBinaryTests", () => {
  const tests = new RemoteBinaryTests();

  beforeEach(async () => {
    await tests.setUp();
  });

  test("testSerial", async () => {
    const tip =
      "01000000ad238f722caada5e0e205252c540211190a43aa5515cca04a089af6eee989900ad238f722caada5e0e205252c540211190a43aa5515cca04a089af6eee989900e6a57fc056e9e03f8d53755be428aeb61eed761ade1297652539cb67db693157b709f06800000000ae470120000000000f00000000000000a64594352bdf6a05a961cf27a47355486891ebb9ee6892f803000000300000000000000002010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff03020000ffffffff000000000104009896802102a717921ede2c066a4da05b9cdce203f1002b7e2abeee7546194498ef2fa9b13a232102a717921ede2c066a4da05b9cdce203f1002b7e2abeee7546194498ef2fa9b13aac0000000005000000544f4b454e860500007b0a20202276657273696f6e22203a20312c0a202022746f6b656e22203a207b0a202020202276657273696f6e22203a20312c0a2020202022636f6e6669726d656422203a20747275652c0a20202020227370656e7422203a2066616c73652c0a202020202274696d6522203a20302c0a2020202022746f6b656e696422203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a2020202022746f6b656e696e64657822203a20382c0a2020202022746f6b656e6e616d6522203a2022e4babae6b091e5b881222c0a20202020226465736372697074696f6e22203a2022e4babae6b091e5b88120434e59222c0a2020202022646f6d61696e4e616d6522203a2022424947222c0a2020202022646f6d61696e4e616d65426c6f636b4861736822203a202234383535663031396564306239376165376463666162383361303130633132643862616465663566363639353834653334363464383564356335396335376165222c0a20202020227369676e6e756d62657222203a20322c0a2020202022746f6b656e7479706522203a20342c0a2020202022746f6b656e73746f7022203a2066616c73652c0a202020202270726576626c6f636b6861736822203a207b0a20202020202022627974657322203a202241514243666249625059423762766a736550514f2f4b42383653566c6f784138714372626b397262302f673d222c0a202020202020227265766572736564427974657322203a20222b4e5062327050624b716738454b4e6c4a656c386f50774f39486a732b47353767443062736e31434141453d220a202020207d2c0a2020202022616d6f756e7422203a2031303030303030302c0a2020202022646563696d616c7322203a20322c0a20202020227265766f6b656422203a2066616c73652c0a2020202022746f6b656e46756c6c6e616d6522203a2022e4babae6b091e5b88140424947222c0a2020202022746f6b656e46756c6c446f6d61696e6e616d6522203a2022e4babae6b091e5b8812e424947222c0a2020202022746f6b656e6e616d65446973706c617922203a2022e4babae6b091e5b88140424947222c0a2020202022746f6b656e446f6d61696e6e616d6522203a2066616c73652c0a2020202022626c6f636b4861736848657822203a2022220a20207d2c0a2020226d756c74695369676e41646472657373657322203a205b207b0a2020202022746f6b656e696422203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a20202020226164647265737322203a2022222c0a20202020227075624b657948657822203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a2020202022706f73496e64657822203a20302c0a2020202022746f6b656e486f6c64657222203a20310a20207d2c207b0a2020202022746f6b656e696422203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a20202020226164647265737322203a2022222c0a20202020227075624b657948657822203a2022303237323162356562303238326534626338366161623333383065326262613331643933356362613338363734316331353434373937333433326336316263393735222c0a2020202022706f73496e64657822203a20302c0a2020202022746f6b656e486f6c64657222203a20300a20207d205d0a7d00000000430000007b0a2020226b7622203a205b207b0a20202020226b657922203a20226d656d6f222c0a202020202276616c756522203a2022636f696e62617365220a20207d205d0a7d600300007b0a2020226d756c74695369676e4269657322203a205b207b0a2020202022746f6b656e696422203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a2020202022746f6b656e696e64657822203a20302c0a20202020226164647265737322203a20226d6e7966706a5a557832556b327958515a39695545356e784b526877565851457746222c0a20202020227075626c69636b657922203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a20202020227369676e617475726522203a202233303435303232313030656335626632643664646536623336396434616162343365643733656639666262376635353832376433386631363134383932643933376264343631356666643032323032666331346263303038363839636134343738353230396331333466363736643631353830613864646161323931623562303063666539326238323835663561220a20207d2c207b0a2020202022746f6b656e696422203a2022303261373137393231656465326330363661346461303562396364636532303366313030326237653261626565653735343631393434393865663266613962313361222c0a2020202022746f6b656e696e64657822203a20382c0a20202020226164647265737322203a20226d6a36317171716b464463584678365035624d747370444837744a5a376a56484c34222c0a20202020227075626c69636b657922203a2022303237323162356562303238326534626338366161623333383065326262613331643933356362613338363734316331353434373937333433326336316263393735222c0a20202020227369676e617475726522203a20223330343430323230356565333562656231316337356164396561633231616434353164643436616130373131363234663135316438373137383462373339623932613037343139393032323035633831636461616430363861323538343739323233633562616232343132666561366464386136343364653633643439373266643632303038323966353166220a20207d205d0a7d01000000011d872da31ba389d6a1ec40f9aa65f182547069760b36849a8e23504deaaeac007a345678d17a1e0a5c9e1444aea3f3b00af901c9dc6ae43db45439b240f68df0000000006a47304402203b1890cce9860c2a45445827d8f4a2f527e6c849d6ea7d7a1f0db013942c410102201bff7fd2d017840a4b15eb618252143db057f18323650fa305f981cfdd258bd4012102a717921ede2c066a4da05b9cdce203f1002b7e2abeee7546194498ef2fa9b13affffffff01000000030f424001bc1976a91451d65cb4f2e64551c447cd41635dd9214bbaf19d88ac01030f3e5801bc232102a717921ede2c066a4da05b9cdce203f1002b7e2abeee7546194498ef2fa9b13aac000000000000000000000000000000003e0000007b0a2020226b7622203a205b207b0a20202020226b657922203a20226d656d6f222c0a202020202276616c756522203a2022666565220a20207d205d0a7d00000000";

    // Create a serializer with parseRetain set to true
    const serializer = tests.networkParameters.getSerializer(true);
    const block = serializer.makeBlock(Buffer.from(tip, "hex"));
 
  

     expect(Utils.HEX.encode(block.bitcoinSerialize())).toEqual(tip);

    console.log(block.toString());
    // Post to the server
    const url = tests.contextRoot + (ReqCmd.saveBlock || "/saveBlock");
    
      OkHttp3Util.post(url, Buffer.from(block.bitcoinSerialize()));
  });
});